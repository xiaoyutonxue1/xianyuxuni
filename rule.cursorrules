# 虚拟商品管理系统开发规则

## 项目管理规范

### 文档引用
- 引用 `Project_milestones.md` 作为功能实现指南和进度追踪
- 引用 `database_design.md` 作为数据库结构规范
- 引用 `api_design.md` 作为API接口规范
- 每次会话结束时更新里程碑完成情况和经验总结

### 开发流程
- 严格按照里程碑规划进行开发
- 每个功能模块完成后进行代码审查
- 确保代码符合项目规范和质量标准
- 及时更新相关文档

## 技术标准

### 架构规范
- 前端：React + TypeScript
- 后端：Node.js + Express/Nest.js
- 数据库：PostgreSQL
- 文件存储：对象存储服务

### 性能要求
- API响应时间 < 300ms
- 页面加载时间 < 2s
- 数据库查询时间 < 100ms
- 文件上传速度 > 1MB/s

### 安全要求
- 使用JWT进行身份认证
- 所有API需要权限验证
- 敏感数据加密存储
- 定期安全审计

## 代码规范

### 前端规范
- 使用TypeScript强类型
- 组件采用函数式编程
- 统一使用Hooks管理状态
- 遵循React最佳实践

### 后端规范
- RESTful API设计
- 统一错误处理
- 规范化日志记录
- 模块化设计

### 数据库规范
- 遵循数据库设计文档
- 使用迁移脚本管理表结构
- 建立必要的索引
- 优化查询性能

## 测试要求

### 单元测试
- 前端组件测试覆盖率 > 80%
- 后端API测试覆盖率 > 80%
- 数据库操作测试覆盖率 > 90%

### 集成测试
- API接口集成测试
- 前后端交互测试
- 数据流程测试

### 性能测试
- 负载测试
- 压力测试
- 并发测试

## 部署规范

### 环境配置
- 开发环境
- 测试环境
- 生产环境

### 部署流程
- 自动化部署
- 版本控制
- 回滚机制

### 监控要求
- 系统性能监控
- 错误日志监控
- 用户行为监控

## 成本优化

### 资源使用
- 优化服务器资源使用
- 合理使用缓存
- 控制数据库连接数

### 代码质量
- 保持代码简洁
- 避免重复代码
- 提高代码可维护性

### 性能优化
- 前端资源压缩
- API响应优化
- 数据库查询优化

## 文档维护

### 文档更新
- 及时更新项目文档
- 记录重要决策
- 维护API文档

### 进度追踪
- 定期更新里程碑完成情况
- 记录经验总结
- 评估风险和解决方案

## 质量保证

### 代码审查
- 遵循代码审查清单
- 确保代码质量
- 及时修复问题

### 测试验证
- 完整的测试用例
- 自动化测试
- 回归测试

### 性能监控
- 定期性能评估
- 性能优化建议
- 性能问题跟踪